"""
API endpoints for live WATHQ service requests.
Handles real-time queries for various WATHQ services.
Supports both tenant users and management users.
"""

from typing import Any, Dict, Optional, Union
from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app import models
from app.api import deps
from app.api.management_deps import get_current_active_management_user
from app.core.config import settings
from app.core.wathq_utils import get_tenant_wathq_key_by_slug
from app.models import User
from app.models.management_user import ManagementUser
from app.wathq.commercial_registration.client import WathqClient

router = APIRouter()


class CommercialRegistrationQueryRequest(BaseModel):
    """Request model for commercial registration query."""
    cr_number: str
    date_gregorian: Optional[str] = None


def get_wathq_client_for_tenant_user(
    db: Session,
    current_user: User
) -> WathqClient:
    """Get Wathq client instance with tenant-specific API key for tenant users."""
    api_key = get_tenant_wathq_key_by_slug(
        db=db,
        tenant_id=current_user.tenant_id,
        service_slug="commercial-registration"
    )
    
    # Fallback to system API key if tenant doesn't have a specific key
    if not api_key:
        api_key = settings.WATHQ_API_KEY
    
    return WathqClient(
        api_key=api_key,
        db=db,
        tenant_id=current_user.tenant_id,
        user_id=current_user.id
    )


def get_wathq_client_for_management_user(
    db: Session,
    current_user: ManagementUser
) -> WathqClient:
    """Get Wathq client instance with global API key for management users."""
    return WathqClient(
        api_key=settings.WATHQ_API_KEY,
        db=db,
        tenant_id=None,  # No tenant for management users
        user_id=None  # No user_id for management users
    )


@router.post("/commercial-registration/query")
async def query_commercial_registration_tenant(
    *,
    db: Session = Depends(deps.get_db),
    current_user: User = Depends(deps.get_current_active_user),
    request: CommercialRegistrationQueryRequest
) -> Any:
    """
    Make a live query to commercial registration service (tenant users).
    
    Expected parameters:
    - cr_number: Commercial registration number (required)
    - date_gregorian: Gregorian date (optional)
    """
    try:
        if not request.cr_number:
            raise HTTPException(
                status_code=400,
                detail="cr_number is required"
            )
        
        client = get_wathq_client_for_tenant_user(db=db, current_user=current_user)
        
        # Call the full info endpoint with the CR number
        result = await client.get_full_info(request.cr_number, language="ar")
        
        request_data = {
            "cr_number": request.cr_number,
            "date_gregorian": request.date_gregorian
        }
        
        return {
            "id": "",  # Will be generated by frontend or backend
            "service_type": "commercial-registration",
            "endpoint": "query",
            "method": "POST",
            "request_data": request_data,
            "response_data": result,
            "status_code": 200,
            "duration_ms": 0,
            "is_success": True,
            "created_at": ""  # Will be set by frontend
        }
    except HTTPException:
        raise
    except Exception as e:
        error_msg = str(e)
        # Check if it's an authentication error
        if "401" in error_msg or "Unauthorized" in error_msg:
            raise HTTPException(
                status_code=401,
                detail="WATHQ API authentication failed. Please verify your API key is valid and has the required permissions."
            )
        raise HTTPException(status_code=400, detail=error_msg)


@router.post("/management/commercial-registration/query")
async def query_commercial_registration_management(
    *,
    db: Session = Depends(deps.get_db),
    current_user: ManagementUser = Depends(get_current_active_management_user),
    request: CommercialRegistrationQueryRequest
) -> Any:
    """
    Make a live query to commercial registration service (management users).
    
    Expected parameters:
    - cr_number: Commercial registration number (required)
    - date_gregorian: Gregorian date (optional)
    """
    try:
        if not request.cr_number:
            raise HTTPException(
                status_code=400,
                detail="cr_number is required"
            )
        
        client = get_wathq_client_for_management_user(db=db, current_user=current_user)
        
        # Call the full info endpoint with the CR number
        result = await client.get_full_info(request.cr_number, language="ar")
        
        request_data = {
            "cr_number": request.cr_number,
            "date_gregorian": request.date_gregorian
        }
        
        return {
            "id": "",  # Will be generated by frontend or backend
            "service_type": "commercial-registration",
            "endpoint": "query",
            "method": "POST",
            "request_data": request_data,
            "response_data": result,
            "status_code": 200,
            "duration_ms": 0,
            "is_success": True,
            "created_at": ""  # Will be set by frontend
        }
    except HTTPException:
        raise
    except Exception as e:
        error_msg = str(e)
        # Check if it's an authentication error
        if "401" in error_msg or "Unauthorized" in error_msg:
            raise HTTPException(
                status_code=401,
                detail="WATHQ API authentication failed. Please verify your API key is valid and has the required permissions."
            )
        raise HTTPException(status_code=400, detail=error_msg)
